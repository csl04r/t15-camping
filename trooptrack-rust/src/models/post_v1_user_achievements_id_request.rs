/*
 * TroopTrack API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostV1UserAchievementsIdRequest {
    /// Id of the Award Type for the achievement being updated
    #[serde(rename = "award_type_id")]
    pub award_type_id: i32,
    /// Date the achievement was completed in YYYY-MM-DD format
    #[serde(rename = "achievement[completed_on]", skip_serializing_if = "Option::is_none")]
    pub achievement_left_square_bracket_completed_on_right_square_bracket: Option<String>,
    /// Base 64 encoded image content of the front of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.
    #[serde(rename = "achievement[award_card_front_image_content]", skip_serializing_if = "Option::is_none")]
    pub achievement_left_square_bracket_award_card_front_image_content_right_square_bracket: Option<String>,
    /// File extension of the award card images - must be the same type for the front and back, if included. Currently ignored unless the achievement is a BSA Merit Badge.
    #[serde(rename = "achievement[award_card_images_type]", skip_serializing_if = "Option::is_none")]
    pub achievement_left_square_bracket_award_card_images_type_right_square_bracket: Option<String>,
    /// Base 64 encoded image content of the back of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.
    #[serde(rename = "achievement[award_card_back_image_content]", skip_serializing_if = "Option::is_none")]
    pub achievement_left_square_bracket_award_card_back_image_content_right_square_bracket: Option<String>,
    /// Id of the requirement to be updated
    #[serde(rename = "achievement[children][id]")]
    pub achievement_left_square_bracket_children_right_square_bracket_left_square_bracket_id_right_square_bracket: Vec<i32>,
    /// Date the requirement was completed in YYYY-MM-DD format
    #[serde(rename = "achievement[children][completed_on]")]
    pub achievement_left_square_bracket_children_right_square_bracket_left_square_bracket_completed_on_right_square_bracket: Vec<String>,
}

impl PostV1UserAchievementsIdRequest {
    pub fn new(award_type_id: i32, achievement_left_square_bracket_children_right_square_bracket_left_square_bracket_id_right_square_bracket: Vec<i32>, achievement_left_square_bracket_children_right_square_bracket_left_square_bracket_completed_on_right_square_bracket: Vec<String>) -> PostV1UserAchievementsIdRequest {
        PostV1UserAchievementsIdRequest {
            award_type_id,
            achievement_left_square_bracket_completed_on_right_square_bracket: None,
            achievement_left_square_bracket_award_card_front_image_content_right_square_bracket: None,
            achievement_left_square_bracket_award_card_images_type_right_square_bracket: None,
            achievement_left_square_bracket_award_card_back_image_content_right_square_bracket: None,
            achievement_left_square_bracket_children_right_square_bracket_left_square_bracket_id_right_square_bracket,
            achievement_left_square_bracket_children_right_square_bracket_left_square_bracket_completed_on_right_square_bracket,
        }
    }
}

