/*
 * TroopTrack API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// EventEntity : EventEntity model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventEntity {
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<i32>,
    /// Title of the event
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Type of the event (Campout, Hike, Meeting, etc)
    #[serde(rename = "event_type", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    /// Start time of the event in 2014-11-20T02:00:00.000-06:00 format
    #[serde(rename = "activity_at", skip_serializing_if = "Option::is_none")]
    pub activity_at: Option<String>,
    /// End time of the event in 2014-11-20T02:00:00.000-06:00 format
    #[serde(rename = "end_at", skip_serializing_if = "Option::is_none")]
    pub end_at: Option<String>,
    /// Location of the event
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Color of the event, as specified by the creator
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// Color for text that is visible on a background of the color of the event
    #[serde(rename = "text_color", skip_serializing_if = "Option::is_none")]
    pub text_color: Option<String>,
    /// Indicates if registration for this event is closed.
    #[serde(rename = "is_registration_closed?", skip_serializing_if = "Option::is_none")]
    pub is_registration_closed_question_mark: Option<bool>,
    /// Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.
    #[serde(rename = "payment_required_to_rsvp", skip_serializing_if = "Option::is_none")]
    pub payment_required_to_rsvp: Option<bool>,
}

impl EventEntity {
    /// EventEntity model
    pub fn new() -> EventEntity {
        EventEntity {
            event_id: None,
            title: None,
            event_type: None,
            activity_at: None,
            end_at: None,
            location: None,
            color: None,
            text_color: None,
            is_registration_closed_question_mark: None,
            payment_required_to_rsvp: None,
        }
    }
}

