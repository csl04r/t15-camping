/*
 * TroopTrack API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// EventDetailsEntity : EventDetailsEntity model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventDetailsEntity {
    /// ID of the event record
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<i32>,
    /// Title of the event
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Type of the event (Campout, Hike, Meeting, etc)
    #[serde(rename = "event_type", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    /// Location
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Start time of the event in 2014-11-20T02:00:00.000-06:00 format
    #[serde(rename = "activity_at", skip_serializing_if = "Option::is_none")]
    pub activity_at: Option<String>,
    /// End time of the event in 2014-11-20T02:00:00.000-06:00 format
    #[serde(rename = "end_at", skip_serializing_if = "Option::is_none")]
    pub end_at: Option<String>,
    /// Description of the event
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// VCAL representation of the event
    #[serde(rename = "vcal", skip_serializing_if = "Option::is_none")]
    pub vcal: Option<String>,
    /// Date by which RSVPs must be submitted
    #[serde(rename = "rsvp_deadline", skip_serializing_if = "Option::is_none")]
    pub rsvp_deadline: Option<String>,
    /// Indicates whether guests are allowed
    #[serde(rename = "guests_allowed", skip_serializing_if = "Option::is_none")]
    pub guests_allowed: Option<String>,
    /// Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.
    #[serde(rename = "payment_required_to_rsvp", skip_serializing_if = "Option::is_none")]
    pub payment_required_to_rsvp: Option<bool>,
    /// Indicates if registration for this event is closed.
    #[serde(rename = "is_registration_closed?", skip_serializing_if = "Option::is_none")]
    pub is_registration_closed_question_mark: Option<bool>,
    /// Event fees required for each adult attending
    #[serde(rename = "adult_fee", skip_serializing_if = "Option::is_none")]
    pub adult_fee: Option<String>,
    /// Event fees required for each youth attending
    #[serde(rename = "dues", skip_serializing_if = "Option::is_none")]
    pub dues: Option<String>,
    /// Number of nights of camping that will occur at this event
    #[serde(rename = "camping_nights", skip_serializing_if = "Option::is_none")]
    pub camping_nights: Option<String>,
    /// Number of hiking miles that will occur at this event
    #[serde(rename = "hiking_miles", skip_serializing_if = "Option::is_none")]
    pub hiking_miles: Option<String>,
    /// Number of service hours per attendee that will occur at this event
    #[serde(rename = "service_hours", skip_serializing_if = "Option::is_none")]
    pub service_hours: Option<String>,
    /// Number of canoeing miles that will occur at this event
    #[serde(rename = "canoeing_miles", skip_serializing_if = "Option::is_none")]
    pub canoeing_miles: Option<String>,
}

impl EventDetailsEntity {
    /// EventDetailsEntity model
    pub fn new() -> EventDetailsEntity {
        EventDetailsEntity {
            event_id: None,
            title: None,
            event_type: None,
            location: None,
            activity_at: None,
            end_at: None,
            description: None,
            vcal: None,
            rsvp_deadline: None,
            guests_allowed: None,
            payment_required_to_rsvp: None,
            is_registration_closed_question_mark: None,
            adult_fee: None,
            dues: None,
            camping_nights: None,
            hiking_miles: None,
            service_hours: None,
            canoeing_miles: None,
        }
    }
}

