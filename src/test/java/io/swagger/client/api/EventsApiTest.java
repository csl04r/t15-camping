/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.EventDetailsEntity;
import io.swagger.client.model.EventEntity;
import io.swagger.client.model.EventIdAttendanceBody;
import io.swagger.client.model.EventIdMultipleRsvpBody;
import io.swagger.client.model.EventTypeEntity;
import io.swagger.client.model.IdRsvpBody;
import io.swagger.client.model.V1EventsBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * 
     *
     * Returns a list of events for the date range provided
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getV1EventsTest() throws Exception {
        String xPartnerToken = null;
        String xUserToken = null;
        String startOn = null;
        String endOn = null;
        EventEntity response = api.getV1Events(xPartnerToken, xUserToken, startOn, endOn);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns detailed information about an event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getV1EventsIdTest() throws Exception {
        String xPartnerToken = null;
        String xUserToken = null;
        Integer id = null;
        EventDetailsEntity response = api.getV1EventsId(xPartnerToken, xUserToken, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns event types available for a troop
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getV1EventsTypesTest() throws Exception {
        String xPartnerToken = null;
        String xUserToken = null;
        EventTypeEntity response = api.getV1EventsTypes(xPartnerToken, xUserToken);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create an event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postV1EventsTest() throws Exception {
        V1EventsBody body = null;
        String xPartnerToken = null;
        String xUserToken = null;
        EventDetailsEntity response = api.postV1Events(body, xPartnerToken, xUserToken);

        // TODO: test validations
    }
    /**
     * 
     *
     * Record attendance at an event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postV1EventsEventIdAttendanceTest() throws Exception {
        EventIdAttendanceBody body = null;
        String xPartnerToken = null;
        String xUserToken = null;
        Integer eventId = null;
        EventDetailsEntity response = api.postV1EventsEventIdAttendance(body, xPartnerToken, xUserToken, eventId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Record RSVPs for multiple members to an event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postV1EventsEventIdMultipleRsvpTest() throws Exception {
        EventIdMultipleRsvpBody body = null;
        String xPartnerToken = null;
        String xUserToken = null;
        Integer eventId = null;
        EventDetailsEntity response = api.postV1EventsEventIdMultipleRsvp(body, xPartnerToken, xUserToken, eventId);

        // TODO: test validations
    }
    /**
     * 
     *
     * RSVP to an event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putV1EventsIdRsvpTest() throws Exception {
        IdRsvpBody body = null;
        String xPartnerToken = null;
        String xUserToken = null;
        Integer id = null;
        EventDetailsEntity response = api.putV1EventsIdRsvp(body, xPartnerToken, xUserToken, id);

        // TODO: test validations
    }
}
