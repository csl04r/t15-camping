/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EventDetailsEntity;
import io.swagger.client.model.EventEntity;
import io.swagger.client.model.EventIdAttendanceBody;
import io.swagger.client.model.EventIdMultipleRsvpBody;
import io.swagger.client.model.EventTypeEntity;
import io.swagger.client.model.IdRsvpBody;
import io.swagger.client.model.V1EventsBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getV1Events
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param startOn an iso8601 date (YYYY-MM-DD) indicating the beginning of the date range to include events (required)
     * @param endOn an iso8601 date (YYYY-MM-DD) indicating the end of the date range to include events (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1EventsCall(String xPartnerToken, String xUserToken, String startOn, String endOn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_on", startOn));
        if (endOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_on", endOn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1EventsValidateBeforeCall(String xPartnerToken, String xUserToken, String startOn, String endOn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1Events(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1Events(Async)");
        }
        // verify the required parameter 'startOn' is set
        if (startOn == null) {
            throw new ApiException("Missing the required parameter 'startOn' when calling getV1Events(Async)");
        }
        // verify the required parameter 'endOn' is set
        if (endOn == null) {
            throw new ApiException("Missing the required parameter 'endOn' when calling getV1Events(Async)");
        }
        
        com.squareup.okhttp.Call call = getV1EventsCall(xPartnerToken, xUserToken, startOn, endOn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of events for the date range provided
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param startOn an iso8601 date (YYYY-MM-DD) indicating the beginning of the date range to include events (required)
     * @param endOn an iso8601 date (YYYY-MM-DD) indicating the end of the date range to include events (required)
     * @return EventEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEntity getV1Events(String xPartnerToken, String xUserToken, String startOn, String endOn) throws ApiException {
        ApiResponse<EventEntity> resp = getV1EventsWithHttpInfo(xPartnerToken, xUserToken, startOn, endOn);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of events for the date range provided
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param startOn an iso8601 date (YYYY-MM-DD) indicating the beginning of the date range to include events (required)
     * @param endOn an iso8601 date (YYYY-MM-DD) indicating the end of the date range to include events (required)
     * @return ApiResponse&lt;EventEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEntity> getV1EventsWithHttpInfo(String xPartnerToken, String xUserToken, String startOn, String endOn) throws ApiException {
        com.squareup.okhttp.Call call = getV1EventsValidateBeforeCall(xPartnerToken, xUserToken, startOn, endOn, null, null);
        Type localVarReturnType = new TypeToken<EventEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of events for the date range provided
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param startOn an iso8601 date (YYYY-MM-DD) indicating the beginning of the date range to include events (required)
     * @param endOn an iso8601 date (YYYY-MM-DD) indicating the end of the date range to include events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1EventsAsync(String xPartnerToken, String xUserToken, String startOn, String endOn, final ApiCallback<EventEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1EventsValidateBeforeCall(xPartnerToken, xUserToken, startOn, endOn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getV1EventsId
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1EventsIdCall(String xPartnerToken, String xUserToken, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1EventsIdValidateBeforeCall(String xPartnerToken, String xUserToken, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1EventsId(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1EventsId(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV1EventsId(Async)");
        }
        
        com.squareup.okhttp.Call call = getV1EventsIdCall(xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns detailed information about an event
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return EventDetailsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventDetailsEntity getV1EventsId(String xPartnerToken, String xUserToken, Integer id) throws ApiException {
        ApiResponse<EventDetailsEntity> resp = getV1EventsIdWithHttpInfo(xPartnerToken, xUserToken, id);
        return resp.getData();
    }

    /**
     * 
     * Returns detailed information about an event
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return ApiResponse&lt;EventDetailsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventDetailsEntity> getV1EventsIdWithHttpInfo(String xPartnerToken, String xUserToken, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getV1EventsIdValidateBeforeCall(xPartnerToken, xUserToken, id, null, null);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns detailed information about an event
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1EventsIdAsync(String xPartnerToken, String xUserToken, Integer id, final ApiCallback<EventDetailsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1EventsIdValidateBeforeCall(xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getV1EventsTypes
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1EventsTypesCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/events/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1EventsTypesValidateBeforeCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1EventsTypes(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1EventsTypes(Async)");
        }
        
        com.squareup.okhttp.Call call = getV1EventsTypesCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns event types available for a troop
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return EventTypeEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventTypeEntity getV1EventsTypes(String xPartnerToken, String xUserToken) throws ApiException {
        ApiResponse<EventTypeEntity> resp = getV1EventsTypesWithHttpInfo(xPartnerToken, xUserToken);
        return resp.getData();
    }

    /**
     * 
     * Returns event types available for a troop
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return ApiResponse&lt;EventTypeEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventTypeEntity> getV1EventsTypesWithHttpInfo(String xPartnerToken, String xUserToken) throws ApiException {
        com.squareup.okhttp.Call call = getV1EventsTypesValidateBeforeCall(xPartnerToken, xUserToken, null, null);
        Type localVarReturnType = new TypeToken<EventTypeEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns event types available for a troop
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1EventsTypesAsync(String xPartnerToken, String xUserToken, final ApiCallback<EventTypeEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1EventsTypesValidateBeforeCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventTypeEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postV1Events
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postV1EventsCall(V1EventsBody body, String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postV1EventsValidateBeforeCall(V1EventsBody body, String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postV1Events(Async)");
        }
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling postV1Events(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling postV1Events(Async)");
        }
        
        com.squareup.okhttp.Call call = postV1EventsCall(body, xPartnerToken, xUserToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return EventDetailsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventDetailsEntity postV1Events(V1EventsBody body, String xPartnerToken, String xUserToken) throws ApiException {
        ApiResponse<EventDetailsEntity> resp = postV1EventsWithHttpInfo(body, xPartnerToken, xUserToken);
        return resp.getData();
    }

    /**
     * 
     * Create an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return ApiResponse&lt;EventDetailsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventDetailsEntity> postV1EventsWithHttpInfo(V1EventsBody body, String xPartnerToken, String xUserToken) throws ApiException {
        com.squareup.okhttp.Call call = postV1EventsValidateBeforeCall(body, xPartnerToken, xUserToken, null, null);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postV1EventsAsync(V1EventsBody body, String xPartnerToken, String xUserToken, final ApiCallback<EventDetailsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postV1EventsValidateBeforeCall(body, xPartnerToken, xUserToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postV1EventsEventIdAttendance
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postV1EventsEventIdAttendanceCall(EventIdAttendanceBody body, String xPartnerToken, String xUserToken, Integer eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/events/{event_id}/attendance"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postV1EventsEventIdAttendanceValidateBeforeCall(EventIdAttendanceBody body, String xPartnerToken, String xUserToken, Integer eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postV1EventsEventIdAttendance(Async)");
        }
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling postV1EventsEventIdAttendance(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling postV1EventsEventIdAttendance(Async)");
        }
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling postV1EventsEventIdAttendance(Async)");
        }
        
        com.squareup.okhttp.Call call = postV1EventsEventIdAttendanceCall(body, xPartnerToken, xUserToken, eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Record attendance at an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @return EventDetailsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventDetailsEntity postV1EventsEventIdAttendance(EventIdAttendanceBody body, String xPartnerToken, String xUserToken, Integer eventId) throws ApiException {
        ApiResponse<EventDetailsEntity> resp = postV1EventsEventIdAttendanceWithHttpInfo(body, xPartnerToken, xUserToken, eventId);
        return resp.getData();
    }

    /**
     * 
     * Record attendance at an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @return ApiResponse&lt;EventDetailsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventDetailsEntity> postV1EventsEventIdAttendanceWithHttpInfo(EventIdAttendanceBody body, String xPartnerToken, String xUserToken, Integer eventId) throws ApiException {
        com.squareup.okhttp.Call call = postV1EventsEventIdAttendanceValidateBeforeCall(body, xPartnerToken, xUserToken, eventId, null, null);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Record attendance at an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postV1EventsEventIdAttendanceAsync(EventIdAttendanceBody body, String xPartnerToken, String xUserToken, Integer eventId, final ApiCallback<EventDetailsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postV1EventsEventIdAttendanceValidateBeforeCall(body, xPartnerToken, xUserToken, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postV1EventsEventIdMultipleRsvp
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postV1EventsEventIdMultipleRsvpCall(EventIdMultipleRsvpBody body, String xPartnerToken, String xUserToken, Integer eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/events/{event_id}/multiple_rsvp"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postV1EventsEventIdMultipleRsvpValidateBeforeCall(EventIdMultipleRsvpBody body, String xPartnerToken, String xUserToken, Integer eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postV1EventsEventIdMultipleRsvp(Async)");
        }
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling postV1EventsEventIdMultipleRsvp(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling postV1EventsEventIdMultipleRsvp(Async)");
        }
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling postV1EventsEventIdMultipleRsvp(Async)");
        }
        
        com.squareup.okhttp.Call call = postV1EventsEventIdMultipleRsvpCall(body, xPartnerToken, xUserToken, eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Record RSVPs for multiple members to an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @return EventDetailsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventDetailsEntity postV1EventsEventIdMultipleRsvp(EventIdMultipleRsvpBody body, String xPartnerToken, String xUserToken, Integer eventId) throws ApiException {
        ApiResponse<EventDetailsEntity> resp = postV1EventsEventIdMultipleRsvpWithHttpInfo(body, xPartnerToken, xUserToken, eventId);
        return resp.getData();
    }

    /**
     * 
     * Record RSVPs for multiple members to an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @return ApiResponse&lt;EventDetailsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventDetailsEntity> postV1EventsEventIdMultipleRsvpWithHttpInfo(EventIdMultipleRsvpBody body, String xPartnerToken, String xUserToken, Integer eventId) throws ApiException {
        com.squareup.okhttp.Call call = postV1EventsEventIdMultipleRsvpValidateBeforeCall(body, xPartnerToken, xUserToken, eventId, null, null);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Record RSVPs for multiple members to an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param eventId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postV1EventsEventIdMultipleRsvpAsync(EventIdMultipleRsvpBody body, String xPartnerToken, String xUserToken, Integer eventId, final ApiCallback<EventDetailsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postV1EventsEventIdMultipleRsvpValidateBeforeCall(body, xPartnerToken, xUserToken, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putV1EventsIdRsvp
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putV1EventsIdRsvpCall(IdRsvpBody body, String xPartnerToken, String xUserToken, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/events/{id}/rsvp"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putV1EventsIdRsvpValidateBeforeCall(IdRsvpBody body, String xPartnerToken, String xUserToken, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putV1EventsIdRsvp(Async)");
        }
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling putV1EventsIdRsvp(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling putV1EventsIdRsvp(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV1EventsIdRsvp(Async)");
        }
        
        com.squareup.okhttp.Call call = putV1EventsIdRsvpCall(body, xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * RSVP to an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return EventDetailsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventDetailsEntity putV1EventsIdRsvp(IdRsvpBody body, String xPartnerToken, String xUserToken, Integer id) throws ApiException {
        ApiResponse<EventDetailsEntity> resp = putV1EventsIdRsvpWithHttpInfo(body, xPartnerToken, xUserToken, id);
        return resp.getData();
    }

    /**
     * 
     * RSVP to an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return ApiResponse&lt;EventDetailsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventDetailsEntity> putV1EventsIdRsvpWithHttpInfo(IdRsvpBody body, String xPartnerToken, String xUserToken, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = putV1EventsIdRsvpValidateBeforeCall(body, xPartnerToken, xUserToken, id, null, null);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RSVP to an event
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putV1EventsIdRsvpAsync(IdRsvpBody body, String xPartnerToken, String xUserToken, Integer id, final ApiCallback<EventDetailsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putV1EventsIdRsvpValidateBeforeCall(body, xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventDetailsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
