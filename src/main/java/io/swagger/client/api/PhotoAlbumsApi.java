/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PhotoAlbumEntity;
import io.swagger.client.model.PhotoAlbumsIdBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhotoAlbumsApi {
    private ApiClient apiClient;

    public PhotoAlbumsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PhotoAlbumsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getV1PhotoAlbums
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1PhotoAlbumsCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/photo_albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1PhotoAlbumsValidateBeforeCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1PhotoAlbums(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1PhotoAlbums(Async)");
        }
        
        com.squareup.okhttp.Call call = getV1PhotoAlbumsCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of photo albums relevant to the user. Photos are not returned on this endpoint.
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return PhotoAlbumEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhotoAlbumEntity getV1PhotoAlbums(String xPartnerToken, String xUserToken) throws ApiException {
        ApiResponse<PhotoAlbumEntity> resp = getV1PhotoAlbumsWithHttpInfo(xPartnerToken, xUserToken);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of photo albums relevant to the user. Photos are not returned on this endpoint.
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return ApiResponse&lt;PhotoAlbumEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhotoAlbumEntity> getV1PhotoAlbumsWithHttpInfo(String xPartnerToken, String xUserToken) throws ApiException {
        com.squareup.okhttp.Call call = getV1PhotoAlbumsValidateBeforeCall(xPartnerToken, xUserToken, null, null);
        Type localVarReturnType = new TypeToken<PhotoAlbumEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of photo albums relevant to the user. Photos are not returned on this endpoint.
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1PhotoAlbumsAsync(String xPartnerToken, String xUserToken, final ApiCallback<PhotoAlbumEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1PhotoAlbumsValidateBeforeCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhotoAlbumEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getV1PhotoAlbumsId
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1PhotoAlbumsIdCall(String xPartnerToken, String xUserToken, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/photo_albums/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1PhotoAlbumsIdValidateBeforeCall(String xPartnerToken, String xUserToken, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1PhotoAlbumsId(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1PhotoAlbumsId(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV1PhotoAlbumsId(Async)");
        }
        
        com.squareup.okhttp.Call call = getV1PhotoAlbumsIdCall(xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns detailed information about a photo album, including photos
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return PhotoAlbumEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhotoAlbumEntity getV1PhotoAlbumsId(String xPartnerToken, String xUserToken, String id) throws ApiException {
        ApiResponse<PhotoAlbumEntity> resp = getV1PhotoAlbumsIdWithHttpInfo(xPartnerToken, xUserToken, id);
        return resp.getData();
    }

    /**
     * 
     * Returns detailed information about a photo album, including photos
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return ApiResponse&lt;PhotoAlbumEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhotoAlbumEntity> getV1PhotoAlbumsIdWithHttpInfo(String xPartnerToken, String xUserToken, String id) throws ApiException {
        com.squareup.okhttp.Call call = getV1PhotoAlbumsIdValidateBeforeCall(xPartnerToken, xUserToken, id, null, null);
        Type localVarReturnType = new TypeToken<PhotoAlbumEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns detailed information about a photo album, including photos
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1PhotoAlbumsIdAsync(String xPartnerToken, String xUserToken, String id, final ApiCallback<PhotoAlbumEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1PhotoAlbumsIdValidateBeforeCall(xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhotoAlbumEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postV1PhotoAlbumsId
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postV1PhotoAlbumsIdCall(PhotoAlbumsIdBody body, String xPartnerToken, String xUserToken, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/photo_albums/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postV1PhotoAlbumsIdValidateBeforeCall(PhotoAlbumsIdBody body, String xPartnerToken, String xUserToken, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postV1PhotoAlbumsId(Async)");
        }
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling postV1PhotoAlbumsId(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling postV1PhotoAlbumsId(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV1PhotoAlbumsId(Async)");
        }
        
        com.squareup.okhttp.Call call = postV1PhotoAlbumsIdCall(body, xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Upload a new photo to a photo album
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return PhotoAlbumEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhotoAlbumEntity postV1PhotoAlbumsId(PhotoAlbumsIdBody body, String xPartnerToken, String xUserToken, String id) throws ApiException {
        ApiResponse<PhotoAlbumEntity> resp = postV1PhotoAlbumsIdWithHttpInfo(body, xPartnerToken, xUserToken, id);
        return resp.getData();
    }

    /**
     * 
     * Upload a new photo to a photo album
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @return ApiResponse&lt;PhotoAlbumEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhotoAlbumEntity> postV1PhotoAlbumsIdWithHttpInfo(PhotoAlbumsIdBody body, String xPartnerToken, String xUserToken, String id) throws ApiException {
        com.squareup.okhttp.Call call = postV1PhotoAlbumsIdValidateBeforeCall(body, xPartnerToken, xUserToken, id, null, null);
        Type localVarReturnType = new TypeToken<PhotoAlbumEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a new photo to a photo album
     * @param body  (required)
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postV1PhotoAlbumsIdAsync(PhotoAlbumsIdBody body, String xPartnerToken, String xUserToken, String id, final ApiCallback<PhotoAlbumEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postV1PhotoAlbumsIdValidateBeforeCall(body, xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhotoAlbumEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
