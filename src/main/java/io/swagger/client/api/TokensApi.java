/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.UserPrivilegesEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokensApi {
    private ApiClient apiClient;

    public TokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokensApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getV1Tokens
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1TokensCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
        localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1TokensValidateBeforeCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1Tokens(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1Tokens(Async)");
        }
        
        com.squareup.okhttp.Call call = getV1TokensCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns detailed information about a user&#x27;s privileges
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return UserPrivilegesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserPrivilegesEntity getV1Tokens(String xPartnerToken, String xUserToken) throws ApiException {
        ApiResponse<UserPrivilegesEntity> resp = getV1TokensWithHttpInfo(xPartnerToken, xUserToken);
        return resp.getData();
    }

    /**
     * 
     * Returns detailed information about a user&#x27;s privileges
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @return ApiResponse&lt;UserPrivilegesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserPrivilegesEntity> getV1TokensWithHttpInfo(String xPartnerToken, String xUserToken) throws ApiException {
        com.squareup.okhttp.Call call = getV1TokensValidateBeforeCall(xPartnerToken, xUserToken, null, null);
        Type localVarReturnType = new TypeToken<UserPrivilegesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns detailed information about a user&#x27;s privileges
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken The token you received when you authenticated the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1TokensAsync(String xPartnerToken, String xUserToken, final ApiCallback<UserPrivilegesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1TokensValidateBeforeCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserPrivilegesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getV1TokensMyBasicInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1TokensMyBasicInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/tokens/my_basic_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1TokensMyBasicInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getV1TokensMyBasicInfoCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getV1TokensMyBasicInfo() throws ApiException {
        getV1TokensMyBasicInfoWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getV1TokensMyBasicInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getV1TokensMyBasicInfoValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1TokensMyBasicInfoAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1TokensMyBasicInfoValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postV1Tokens
     * @param xPartnerToken Your secret partner token (required)
     * @param xUsername TroopTrack user name (required)
     * @param xUserPassword Password of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postV1TokensCall(String xPartnerToken, String xUsername, String xUserPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
        localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUsername != null)
        localVarHeaderParams.put("X-Username", apiClient.parameterToString(xUsername));
        if (xUserPassword != null)
        localVarHeaderParams.put("X-User-Password", apiClient.parameterToString(xUserPassword));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postV1TokensValidateBeforeCall(String xPartnerToken, String xUsername, String xUserPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling postV1Tokens(Async)");
        }
        // verify the required parameter 'xUsername' is set
        if (xUsername == null) {
            throw new ApiException("Missing the required parameter 'xUsername' when calling postV1Tokens(Async)");
        }
        // verify the required parameter 'xUserPassword' is set
        if (xUserPassword == null) {
            throw new ApiException("Missing the required parameter 'xUserPassword' when calling postV1Tokens(Async)");
        }
        
        com.squareup.okhttp.Call call = postV1TokensCall(xPartnerToken, xUsername, xUserPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets authentication and privilege information for a user account
     * @param xPartnerToken Your secret partner token (required)
     * @param xUsername TroopTrack user name (required)
     * @param xUserPassword Password of the user (required)
     * @return List&lt;UserPrivilegesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserPrivilegesEntity> postV1Tokens(String xPartnerToken, String xUsername, String xUserPassword) throws ApiException {
        ApiResponse<List<UserPrivilegesEntity>> resp = postV1TokensWithHttpInfo(xPartnerToken, xUsername, xUserPassword);
        return resp.getData();
    }

    /**
     * 
     * Gets authentication and privilege information for a user account
     * @param xPartnerToken Your secret partner token (required)
     * @param xUsername TroopTrack user name (required)
     * @param xUserPassword Password of the user (required)
     * @return ApiResponse&lt;List&lt;UserPrivilegesEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserPrivilegesEntity>> postV1TokensWithHttpInfo(String xPartnerToken, String xUsername, String xUserPassword) throws ApiException {
        com.squareup.okhttp.Call call = postV1TokensValidateBeforeCall(xPartnerToken, xUsername, xUserPassword, null, null);
        Type localVarReturnType = new TypeToken<List<UserPrivilegesEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets authentication and privilege information for a user account
     * @param xPartnerToken Your secret partner token (required)
     * @param xUsername TroopTrack user name (required)
     * @param xUserPassword Password of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postV1TokensAsync(String xPartnerToken, String xUsername, String xUserPassword, final ApiCallback<List<UserPrivilegesEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postV1TokensValidateBeforeCall(xPartnerToken, xUsername, xUserPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserPrivilegesEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
