/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.UsersIdBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient apiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getV1Users
     *
     * @param xPartnerToken           Your secret partner token (required)
     * @param xUserToken              The token you received when you authenticated the user (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1UsersCall(String xPartnerToken, String xUserToken,
                                                   final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
            localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
            localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1UsersValidateBeforeCall(String xPartnerToken, String xUserToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1Users(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1Users(Async)");
        }

        com.squareup.okhttp.Call call = getV1UsersCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Returns a list of users
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getV1Users(String xPartnerToken, String xUserToken) throws ApiException {
        getV1UsersWithHttpInfo(xPartnerToken, xUserToken);
    }

    /**
     * Returns a list of users
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getV1UsersWithHttpInfo(String xPartnerToken, String xUserToken) throws ApiException {
        com.squareup.okhttp.Call call = getV1UsersValidateBeforeCall(xPartnerToken, xUserToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously)
     * Returns a list of users
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1UsersAsync(String xPartnerToken, String xUserToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1UsersValidateBeforeCall(xPartnerToken, xUserToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getV1UsersId
     *
     * @param xPartnerToken           Your secret partner token (required)
     * @param xUserToken              The token you received when you authenticated the user (required)
     * @param id                      (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getV1UsersIdCall(String xPartnerToken, String xUserToken, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
            localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
            localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getV1UsersIdValidateBeforeCall(String xPartnerToken, String xUserToken, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling getV1UsersId(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling getV1UsersId(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV1UsersId(Async)");
        }

        com.squareup.okhttp.Call call = getV1UsersIdCall(xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Returns detailed information about a user
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param id            (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getV1UsersId(String xPartnerToken, String xUserToken, Integer id) throws ApiException {
        getV1UsersIdWithHttpInfo(xPartnerToken, xUserToken, id);
    }

    /**
     * Returns detailed information about a user
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param id            (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getV1UsersIdWithHttpInfo(String xPartnerToken, String xUserToken, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getV1UsersIdValidateBeforeCall(xPartnerToken, xUserToken, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously)
     * Returns detailed information about a user
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param id            (required)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getV1UsersIdAsync(String xPartnerToken, String xUserToken, Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getV1UsersIdValidateBeforeCall(xPartnerToken, xUserToken, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for postV1UsersId
     *
     * @param xPartnerToken           Your secret partner token (required)
     * @param xUserToken              The token you received when you authenticated the user (required)
     * @param id                      (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postV1UsersIdCall(String xPartnerToken, String xUserToken, Integer id, UsersIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/users/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPartnerToken != null)
            localVarHeaderParams.put("X-Partner-Token", apiClient.parameterToString(xPartnerToken));
        if (xUserToken != null)
            localVarHeaderParams.put("X-User-Token", apiClient.parameterToString(xUserToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postV1UsersIdValidateBeforeCall(String xPartnerToken, String xUserToken, Integer id, UsersIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xPartnerToken' is set
        if (xPartnerToken == null) {
            throw new ApiException("Missing the required parameter 'xPartnerToken' when calling postV1UsersId(Async)");
        }
        // verify the required parameter 'xUserToken' is set
        if (xUserToken == null) {
            throw new ApiException("Missing the required parameter 'xUserToken' when calling postV1UsersId(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV1UsersId(Async)");
        }

        com.squareup.okhttp.Call call = postV1UsersIdCall(xPartnerToken, xUserToken, id, body, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Update detailed information about a user
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param id            (required)
     * @param body          (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postV1UsersId(String xPartnerToken, String xUserToken, Integer id, UsersIdBody body) throws ApiException {
        postV1UsersIdWithHttpInfo(xPartnerToken, xUserToken, id, body);
    }

    /**
     * Update detailed information about a user
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param id            (required)
     * @param body          (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postV1UsersIdWithHttpInfo(String xPartnerToken, String xUserToken, Integer id, UsersIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = postV1UsersIdValidateBeforeCall(xPartnerToken, xUserToken, id, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously)
     * Update detailed information about a user
     *
     * @param xPartnerToken Your secret partner token (required)
     * @param xUserToken    The token you received when you authenticated the user (required)
     * @param id            (required)
     * @param body          (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postV1UsersIdAsync(String xPartnerToken, String xUserToken, Integer id, UsersIdBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postV1UsersIdValidateBeforeCall(xPartnerToken, xUserToken, id, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
