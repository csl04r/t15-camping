/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EventEntity model
 */
@Schema(description = "EventEntity model")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-12-12T23:02:08.677823-05:00[America/New_York]")
public class EventEntity {
  @SerializedName("event_id")
  private String eventId = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("event_type")
  private String eventType = null;

  @SerializedName("activity_at")
  private String activityAt = null;

  @SerializedName("end_at")
  private String endAt = null;

  @SerializedName("location")
  private String location = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("text_color")
  private String textColor = null;

  @SerializedName("is_registration_closed?")
  private String isRegistrationClosed = null;

  @SerializedName("payment_required_to_rsvp")
  private String paymentRequiredToRsvp = null;

  public EventEntity eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @Schema(description = "")
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  public EventEntity title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the event
   * @return title
  **/
  @Schema(description = "Title of the event")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public EventEntity eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Type of the event (Campout, Hike, Meeting, etc)
   * @return eventType
  **/
  @Schema(description = "Type of the event (Campout, Hike, Meeting, etc)")
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }

  public EventEntity activityAt(String activityAt) {
    this.activityAt = activityAt;
    return this;
  }

   /**
   * Start time of the event in 2014-11-20T02:00:00.000-06:00 format
   * @return activityAt
  **/
  @Schema(description = "Start time of the event in 2014-11-20T02:00:00.000-06:00 format")
  public String getActivityAt() {
    return activityAt;
  }

  public void setActivityAt(String activityAt) {
    this.activityAt = activityAt;
  }

  public EventEntity endAt(String endAt) {
    this.endAt = endAt;
    return this;
  }

   /**
   * End time of the event in 2014-11-20T02:00:00.000-06:00 format
   * @return endAt
  **/
  @Schema(description = "End time of the event in 2014-11-20T02:00:00.000-06:00 format")
  public String getEndAt() {
    return endAt;
  }

  public void setEndAt(String endAt) {
    this.endAt = endAt;
  }

  public EventEntity location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Location of the event
   * @return location
  **/
  @Schema(description = "Location of the event")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public EventEntity color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Color of the event, as specified by the creator
   * @return color
  **/
  @Schema(description = "Color of the event, as specified by the creator")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public EventEntity textColor(String textColor) {
    this.textColor = textColor;
    return this;
  }

   /**
   * Color for text that is visible on a background of the color of the event
   * @return textColor
  **/
  @Schema(description = "Color for text that is visible on a background of the color of the event")
  public String getTextColor() {
    return textColor;
  }

  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }

  public EventEntity isRegistrationClosed(String isRegistrationClosed) {
    this.isRegistrationClosed = isRegistrationClosed;
    return this;
  }

   /**
   * Indicates if registration for this event is closed.
   * @return isRegistrationClosed
  **/
  @Schema(description = "Indicates if registration for this event is closed.")
  public String getIsRegistrationClosed() {
    return isRegistrationClosed;
  }

  public void setIsRegistrationClosed(String isRegistrationClosed) {
    this.isRegistrationClosed = isRegistrationClosed;
  }

  public EventEntity paymentRequiredToRsvp(String paymentRequiredToRsvp) {
    this.paymentRequiredToRsvp = paymentRequiredToRsvp;
    return this;
  }

   /**
   * Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.
   * @return paymentRequiredToRsvp
  **/
  @Schema(description = "Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.")
  public String getPaymentRequiredToRsvp() {
    return paymentRequiredToRsvp;
  }

  public void setPaymentRequiredToRsvp(String paymentRequiredToRsvp) {
    this.paymentRequiredToRsvp = paymentRequiredToRsvp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventEntity eventEntity = (EventEntity) o;
    return Objects.equals(this.eventId, eventEntity.eventId) &&
        Objects.equals(this.title, eventEntity.title) &&
        Objects.equals(this.eventType, eventEntity.eventType) &&
        Objects.equals(this.activityAt, eventEntity.activityAt) &&
        Objects.equals(this.endAt, eventEntity.endAt) &&
        Objects.equals(this.location, eventEntity.location) &&
        Objects.equals(this.color, eventEntity.color) &&
        Objects.equals(this.textColor, eventEntity.textColor) &&
        Objects.equals(this.isRegistrationClosed, eventEntity.isRegistrationClosed) &&
        Objects.equals(this.paymentRequiredToRsvp, eventEntity.paymentRequiredToRsvp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, title, eventType, activityAt, endAt, location, color, textColor, isRegistrationClosed, paymentRequiredToRsvp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventEntity {\n");
    
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    activityAt: ").append(toIndentedString(activityAt)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    isRegistrationClosed: ").append(toIndentedString(isRegistrationClosed)).append("\n");
    sb.append("    paymentRequiredToRsvp: ").append(toIndentedString(paymentRequiredToRsvp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
