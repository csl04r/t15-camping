/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * UserAchievementsIdBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-12-12T23:02:08.677823-05:00[America/New_York]")
public class UserAchievementsIdBody {
  @SerializedName("award_type_id")
  private Integer awardTypeId = null;

  @SerializedName("achievement[completed_on]")
  private String achievementCompletedOn = null;

  @SerializedName("achievement[award_card_front_image_content]")
  private String achievementAwardCardFrontImageContent = null;

  @SerializedName("achievement[award_card_images_type]")
  private String achievementAwardCardImagesType = null;

  @SerializedName("achievement[award_card_back_image_content]")
  private String achievementAwardCardBackImageContent = null;

  @SerializedName("achievement[children][id]")
  private List<Integer> achievementChildrenId = new ArrayList<Integer>();

  @SerializedName("achievement[children][completed_on]")
  private List<String> achievementChildrenCompletedOn = new ArrayList<String>();

  public UserAchievementsIdBody awardTypeId(Integer awardTypeId) {
    this.awardTypeId = awardTypeId;
    return this;
  }

   /**
   * Id of the Award Type for the achievement being updated
   * @return awardTypeId
  **/
  @Schema(required = true, description = "Id of the Award Type for the achievement being updated")
  public Integer getAwardTypeId() {
    return awardTypeId;
  }

  public void setAwardTypeId(Integer awardTypeId) {
    this.awardTypeId = awardTypeId;
  }

  public UserAchievementsIdBody achievementCompletedOn(String achievementCompletedOn) {
    this.achievementCompletedOn = achievementCompletedOn;
    return this;
  }

   /**
   * Date the achievement was completed in YYYY-MM-DD format
   * @return achievementCompletedOn
  **/
  @Schema(description = "Date the achievement was completed in YYYY-MM-DD format")
  public String getAchievementCompletedOn() {
    return achievementCompletedOn;
  }

  public void setAchievementCompletedOn(String achievementCompletedOn) {
    this.achievementCompletedOn = achievementCompletedOn;
  }

  public UserAchievementsIdBody achievementAwardCardFrontImageContent(String achievementAwardCardFrontImageContent) {
    this.achievementAwardCardFrontImageContent = achievementAwardCardFrontImageContent;
    return this;
  }

   /**
   * Base 64 encoded image content of the front of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.
   * @return achievementAwardCardFrontImageContent
  **/
  @Schema(description = "Base 64 encoded image content of the front of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.")
  public String getAchievementAwardCardFrontImageContent() {
    return achievementAwardCardFrontImageContent;
  }

  public void setAchievementAwardCardFrontImageContent(String achievementAwardCardFrontImageContent) {
    this.achievementAwardCardFrontImageContent = achievementAwardCardFrontImageContent;
  }

  public UserAchievementsIdBody achievementAwardCardImagesType(String achievementAwardCardImagesType) {
    this.achievementAwardCardImagesType = achievementAwardCardImagesType;
    return this;
  }

   /**
   * File extension of the award card images - must be the same type for the front and back, if included. Currently ignored unless the achievement is a BSA Merit Badge.
   * @return achievementAwardCardImagesType
  **/
  @Schema(description = "File extension of the award card images - must be the same type for the front and back, if included. Currently ignored unless the achievement is a BSA Merit Badge.")
  public String getAchievementAwardCardImagesType() {
    return achievementAwardCardImagesType;
  }

  public void setAchievementAwardCardImagesType(String achievementAwardCardImagesType) {
    this.achievementAwardCardImagesType = achievementAwardCardImagesType;
  }

  public UserAchievementsIdBody achievementAwardCardBackImageContent(String achievementAwardCardBackImageContent) {
    this.achievementAwardCardBackImageContent = achievementAwardCardBackImageContent;
    return this;
  }

   /**
   * Base 64 encoded image content of the back of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.
   * @return achievementAwardCardBackImageContent
  **/
  @Schema(description = "Base 64 encoded image content of the back of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.")
  public String getAchievementAwardCardBackImageContent() {
    return achievementAwardCardBackImageContent;
  }

  public void setAchievementAwardCardBackImageContent(String achievementAwardCardBackImageContent) {
    this.achievementAwardCardBackImageContent = achievementAwardCardBackImageContent;
  }

  public UserAchievementsIdBody achievementChildrenId(List<Integer> achievementChildrenId) {
    this.achievementChildrenId = achievementChildrenId;
    return this;
  }

  public UserAchievementsIdBody addAchievementChildrenIdItem(Integer achievementChildrenIdItem) {
    this.achievementChildrenId.add(achievementChildrenIdItem);
    return this;
  }

   /**
   * Id of the requirement to be updated
   * @return achievementChildrenId
  **/
  @Schema(required = true, description = "Id of the requirement to be updated")
  public List<Integer> getAchievementChildrenId() {
    return achievementChildrenId;
  }

  public void setAchievementChildrenId(List<Integer> achievementChildrenId) {
    this.achievementChildrenId = achievementChildrenId;
  }

  public UserAchievementsIdBody achievementChildrenCompletedOn(List<String> achievementChildrenCompletedOn) {
    this.achievementChildrenCompletedOn = achievementChildrenCompletedOn;
    return this;
  }

  public UserAchievementsIdBody addAchievementChildrenCompletedOnItem(String achievementChildrenCompletedOnItem) {
    this.achievementChildrenCompletedOn.add(achievementChildrenCompletedOnItem);
    return this;
  }

   /**
   * Date the requirement was completed in YYYY-MM-DD format
   * @return achievementChildrenCompletedOn
  **/
  @Schema(required = true, description = "Date the requirement was completed in YYYY-MM-DD format")
  public List<String> getAchievementChildrenCompletedOn() {
    return achievementChildrenCompletedOn;
  }

  public void setAchievementChildrenCompletedOn(List<String> achievementChildrenCompletedOn) {
    this.achievementChildrenCompletedOn = achievementChildrenCompletedOn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAchievementsIdBody userAchievementsIdBody = (UserAchievementsIdBody) o;
    return Objects.equals(this.awardTypeId, userAchievementsIdBody.awardTypeId) &&
        Objects.equals(this.achievementCompletedOn, userAchievementsIdBody.achievementCompletedOn) &&
        Objects.equals(this.achievementAwardCardFrontImageContent, userAchievementsIdBody.achievementAwardCardFrontImageContent) &&
        Objects.equals(this.achievementAwardCardImagesType, userAchievementsIdBody.achievementAwardCardImagesType) &&
        Objects.equals(this.achievementAwardCardBackImageContent, userAchievementsIdBody.achievementAwardCardBackImageContent) &&
        Objects.equals(this.achievementChildrenId, userAchievementsIdBody.achievementChildrenId) &&
        Objects.equals(this.achievementChildrenCompletedOn, userAchievementsIdBody.achievementChildrenCompletedOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awardTypeId, achievementCompletedOn, achievementAwardCardFrontImageContent, achievementAwardCardImagesType, achievementAwardCardBackImageContent, achievementChildrenId, achievementChildrenCompletedOn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAchievementsIdBody {\n");
    
    sb.append("    awardTypeId: ").append(toIndentedString(awardTypeId)).append("\n");
    sb.append("    achievementCompletedOn: ").append(toIndentedString(achievementCompletedOn)).append("\n");
    sb.append("    achievementAwardCardFrontImageContent: ").append(toIndentedString(achievementAwardCardFrontImageContent)).append("\n");
    sb.append("    achievementAwardCardImagesType: ").append(toIndentedString(achievementAwardCardImagesType)).append("\n");
    sb.append("    achievementAwardCardBackImageContent: ").append(toIndentedString(achievementAwardCardBackImageContent)).append("\n");
    sb.append("    achievementChildrenId: ").append(toIndentedString(achievementChildrenId)).append("\n");
    sb.append("    achievementChildrenCompletedOn: ").append(toIndentedString(achievementChildrenCompletedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
