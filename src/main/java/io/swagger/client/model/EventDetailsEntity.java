/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EventDetailsEntity model
 */
@Schema(description = "EventDetailsEntity model")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-12-12T23:02:08.677823-05:00[America/New_York]")
public class EventDetailsEntity {
  @SerializedName("event_id")
  private Integer eventId = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("event_type")
  private String eventType = null;

  @SerializedName("location")
  private String location = null;

  @SerializedName("activity_at")
  private String activityAt = null;

  @SerializedName("end_at")
  private String endAt = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("vcal")
  private String vcal = null;

  @SerializedName("rsvp_deadline")
  private String rsvpDeadline = null;

  @SerializedName("guests_allowed")
  private String guestsAllowed = null;

  @SerializedName("payment_required_to_rsvp")
  private String paymentRequiredToRsvp = null;

  @SerializedName("is_registration_closed?")
  private String isRegistrationClosed = null;

  @SerializedName("adult_fee")
  private String adultFee = null;

  @SerializedName("dues")
  private String dues = null;

  @SerializedName("camping_nights")
  private String campingNights = null;

  @SerializedName("hiking_miles")
  private String hikingMiles = null;

  @SerializedName("service_hours")
  private String serviceHours = null;

  @SerializedName("canoeing_miles")
  private String canoeingMiles = null;

  public EventDetailsEntity eventId(Integer eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * ID of the event record
   * @return eventId
  **/
  @Schema(description = "ID of the event record")
  public Integer getEventId() {
    return eventId;
  }

  public void setEventId(Integer eventId) {
    this.eventId = eventId;
  }

  public EventDetailsEntity title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the event
   * @return title
  **/
  @Schema(description = "Title of the event")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public EventDetailsEntity eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Type of the event (Campout, Hike, Meeting, etc)
   * @return eventType
  **/
  @Schema(description = "Type of the event (Campout, Hike, Meeting, etc)")
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }

  public EventDetailsEntity location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Location
   * @return location
  **/
  @Schema(description = "Location")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public EventDetailsEntity activityAt(String activityAt) {
    this.activityAt = activityAt;
    return this;
  }

   /**
   * Start time of the event in 2014-11-20T02:00:00.000-06:00 format
   * @return activityAt
  **/
  @Schema(description = "Start time of the event in 2014-11-20T02:00:00.000-06:00 format")
  public String getActivityAt() {
    return activityAt;
  }

  public void setActivityAt(String activityAt) {
    this.activityAt = activityAt;
  }

  public EventDetailsEntity endAt(String endAt) {
    this.endAt = endAt;
    return this;
  }

   /**
   * End time of the event in 2014-11-20T02:00:00.000-06:00 format
   * @return endAt
  **/
  @Schema(description = "End time of the event in 2014-11-20T02:00:00.000-06:00 format")
  public String getEndAt() {
    return endAt;
  }

  public void setEndAt(String endAt) {
    this.endAt = endAt;
  }

  public EventDetailsEntity description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the event
   * @return description
  **/
  @Schema(description = "Description of the event")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EventDetailsEntity vcal(String vcal) {
    this.vcal = vcal;
    return this;
  }

   /**
   * VCAL representation of the event
   * @return vcal
  **/
  @Schema(description = "VCAL representation of the event")
  public String getVcal() {
    return vcal;
  }

  public void setVcal(String vcal) {
    this.vcal = vcal;
  }

  public EventDetailsEntity rsvpDeadline(String rsvpDeadline) {
    this.rsvpDeadline = rsvpDeadline;
    return this;
  }

   /**
   * Date by which RSVPs must be submitted
   * @return rsvpDeadline
  **/
  @Schema(description = "Date by which RSVPs must be submitted")
  public String getRsvpDeadline() {
    return rsvpDeadline;
  }

  public void setRsvpDeadline(String rsvpDeadline) {
    this.rsvpDeadline = rsvpDeadline;
  }

  public EventDetailsEntity guestsAllowed(String guestsAllowed) {
    this.guestsAllowed = guestsAllowed;
    return this;
  }

   /**
   * Indicates whether guests are allowed
   * @return guestsAllowed
  **/
  @Schema(description = "Indicates whether guests are allowed")
  public String getGuestsAllowed() {
    return guestsAllowed;
  }

  public void setGuestsAllowed(String guestsAllowed) {
    this.guestsAllowed = guestsAllowed;
  }

  public EventDetailsEntity paymentRequiredToRsvp(String paymentRequiredToRsvp) {
    this.paymentRequiredToRsvp = paymentRequiredToRsvp;
    return this;
  }

   /**
   * Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.
   * @return paymentRequiredToRsvp
  **/
  @Schema(description = "Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.")
  public String getPaymentRequiredToRsvp() {
    return paymentRequiredToRsvp;
  }

  public void setPaymentRequiredToRsvp(String paymentRequiredToRsvp) {
    this.paymentRequiredToRsvp = paymentRequiredToRsvp;
  }

  public EventDetailsEntity isRegistrationClosed(String isRegistrationClosed) {
    this.isRegistrationClosed = isRegistrationClosed;
    return this;
  }

   /**
   * Indicates if registration for this event is closed.
   * @return isRegistrationClosed
  **/
  @Schema(description = "Indicates if registration for this event is closed.")
  public String getIsRegistrationClosed() {
    return isRegistrationClosed;
  }

  public void setIsRegistrationClosed(String isRegistrationClosed) {
    this.isRegistrationClosed = isRegistrationClosed;
  }

  public EventDetailsEntity adultFee(String adultFee) {
    this.adultFee = adultFee;
    return this;
  }

   /**
   * Event fees required for each adult attending
   * @return adultFee
  **/
  @Schema(description = "Event fees required for each adult attending")
  public String getAdultFee() {
    return adultFee;
  }

  public void setAdultFee(String adultFee) {
    this.adultFee = adultFee;
  }

  public EventDetailsEntity dues(String dues) {
    this.dues = dues;
    return this;
  }

   /**
   * Event fees required for each youth attending
   * @return dues
  **/
  @Schema(description = "Event fees required for each youth attending")
  public String getDues() {
    return dues;
  }

  public void setDues(String dues) {
    this.dues = dues;
  }

  public EventDetailsEntity campingNights(String campingNights) {
    this.campingNights = campingNights;
    return this;
  }

   /**
   * Number of nights of camping that will occur at this event
   * @return campingNights
  **/
  @Schema(description = "Number of nights of camping that will occur at this event")
  public String getCampingNights() {
    return campingNights;
  }

  public void setCampingNights(String campingNights) {
    this.campingNights = campingNights;
  }

  public EventDetailsEntity hikingMiles(String hikingMiles) {
    this.hikingMiles = hikingMiles;
    return this;
  }

   /**
   * Number of hiking miles that will occur at this event
   * @return hikingMiles
  **/
  @Schema(description = "Number of hiking miles that will occur at this event")
  public String getHikingMiles() {
    return hikingMiles;
  }

  public void setHikingMiles(String hikingMiles) {
    this.hikingMiles = hikingMiles;
  }

  public EventDetailsEntity serviceHours(String serviceHours) {
    this.serviceHours = serviceHours;
    return this;
  }

   /**
   * Number of service hours per attendee that will occur at this event
   * @return serviceHours
  **/
  @Schema(description = "Number of service hours per attendee that will occur at this event")
  public String getServiceHours() {
    return serviceHours;
  }

  public void setServiceHours(String serviceHours) {
    this.serviceHours = serviceHours;
  }

  public EventDetailsEntity canoeingMiles(String canoeingMiles) {
    this.canoeingMiles = canoeingMiles;
    return this;
  }

   /**
   * Number of canoeing miles that will occur at this event
   * @return canoeingMiles
  **/
  @Schema(description = "Number of canoeing miles that will occur at this event")
  public String getCanoeingMiles() {
    return canoeingMiles;
  }

  public void setCanoeingMiles(String canoeingMiles) {
    this.canoeingMiles = canoeingMiles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDetailsEntity eventDetailsEntity = (EventDetailsEntity) o;
    return Objects.equals(this.eventId, eventDetailsEntity.eventId) &&
        Objects.equals(this.title, eventDetailsEntity.title) &&
        Objects.equals(this.eventType, eventDetailsEntity.eventType) &&
        Objects.equals(this.location, eventDetailsEntity.location) &&
        Objects.equals(this.activityAt, eventDetailsEntity.activityAt) &&
        Objects.equals(this.endAt, eventDetailsEntity.endAt) &&
        Objects.equals(this.description, eventDetailsEntity.description) &&
        Objects.equals(this.vcal, eventDetailsEntity.vcal) &&
        Objects.equals(this.rsvpDeadline, eventDetailsEntity.rsvpDeadline) &&
        Objects.equals(this.guestsAllowed, eventDetailsEntity.guestsAllowed) &&
        Objects.equals(this.paymentRequiredToRsvp, eventDetailsEntity.paymentRequiredToRsvp) &&
        Objects.equals(this.isRegistrationClosed, eventDetailsEntity.isRegistrationClosed) &&
        Objects.equals(this.adultFee, eventDetailsEntity.adultFee) &&
        Objects.equals(this.dues, eventDetailsEntity.dues) &&
        Objects.equals(this.campingNights, eventDetailsEntity.campingNights) &&
        Objects.equals(this.hikingMiles, eventDetailsEntity.hikingMiles) &&
        Objects.equals(this.serviceHours, eventDetailsEntity.serviceHours) &&
        Objects.equals(this.canoeingMiles, eventDetailsEntity.canoeingMiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, title, eventType, location, activityAt, endAt, description, vcal, rsvpDeadline, guestsAllowed, paymentRequiredToRsvp, isRegistrationClosed, adultFee, dues, campingNights, hikingMiles, serviceHours, canoeingMiles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDetailsEntity {\n");
    
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    activityAt: ").append(toIndentedString(activityAt)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    vcal: ").append(toIndentedString(vcal)).append("\n");
    sb.append("    rsvpDeadline: ").append(toIndentedString(rsvpDeadline)).append("\n");
    sb.append("    guestsAllowed: ").append(toIndentedString(guestsAllowed)).append("\n");
    sb.append("    paymentRequiredToRsvp: ").append(toIndentedString(paymentRequiredToRsvp)).append("\n");
    sb.append("    isRegistrationClosed: ").append(toIndentedString(isRegistrationClosed)).append("\n");
    sb.append("    adultFee: ").append(toIndentedString(adultFee)).append("\n");
    sb.append("    dues: ").append(toIndentedString(dues)).append("\n");
    sb.append("    campingNights: ").append(toIndentedString(campingNights)).append("\n");
    sb.append("    hikingMiles: ").append(toIndentedString(hikingMiles)).append("\n");
    sb.append("    serviceHours: ").append(toIndentedString(serviceHours)).append("\n");
    sb.append("    canoeingMiles: ").append(toIndentedString(canoeingMiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
