/*
 * API title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * V1EventsBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-12-12T23:02:08.677823-05:00[America/New_York]")
public class V1EventsBody {
  @SerializedName("event[title]")
  private String eventTitle = null;

  @SerializedName("event[event_type_id]")
  private String eventEventTypeId = null;

  @SerializedName("event[start_at]")
  private String eventStartAt = null;

  @SerializedName("event[end_at]")
  private String eventEndAt = null;

  @SerializedName("event[location]")
  private String eventLocation = null;

  @SerializedName("event[description]")
  private String eventDescription = null;

  @SerializedName("event[inviteable_tokens]")
  private String eventInviteableTokens = null;

  @SerializedName("event[camping_nights]")
  private String eventCampingNights = null;

  @SerializedName("event[hiking_miles]")
  private String eventHikingMiles = null;

  @SerializedName("event[canoeing_miles]")
  private String eventCanoeingMiles = null;

  @SerializedName("event[dues]")
  private String eventDues = null;

  @SerializedName("event[adult_fee]")
  private String eventAdultFee = null;

  @SerializedName("event[rsvp_deadline]")
  private String eventRsvpDeadline = null;

  @SerializedName("event[send_invites_when]")
  private String eventSendInvitesWhen = null;

  @SerializedName("event[send_reminder_when]")
  private String eventSendReminderWhen = null;

  @SerializedName("event[service_hours]")
  private String eventServiceHours = null;

  public V1EventsBody eventTitle(String eventTitle) {
    this.eventTitle = eventTitle;
    return this;
  }

   /**
   * Get eventTitle
   * @return eventTitle
  **/
  @Schema(required = true, description = "")
  public String getEventTitle() {
    return eventTitle;
  }

  public void setEventTitle(String eventTitle) {
    this.eventTitle = eventTitle;
  }

  public V1EventsBody eventEventTypeId(String eventEventTypeId) {
    this.eventEventTypeId = eventEventTypeId;
    return this;
  }

   /**
   * ID of an event type returned by the events/available_types API
   * @return eventEventTypeId
  **/
  @Schema(required = true, description = "ID of an event type returned by the events/available_types API")
  public String getEventEventTypeId() {
    return eventEventTypeId;
  }

  public void setEventEventTypeId(String eventEventTypeId) {
    this.eventEventTypeId = eventEventTypeId;
  }

  public V1EventsBody eventStartAt(String eventStartAt) {
    this.eventStartAt = eventStartAt;
    return this;
  }

   /**
   * Format: YYYY-MM-DDTHH:MM-0600 i.e. 2015-07-04T13:00-0600
   * @return eventStartAt
  **/
  @Schema(required = true, description = "Format: YYYY-MM-DDTHH:MM-0600 i.e. 2015-07-04T13:00-0600")
  public String getEventStartAt() {
    return eventStartAt;
  }

  public void setEventStartAt(String eventStartAt) {
    this.eventStartAt = eventStartAt;
  }

  public V1EventsBody eventEndAt(String eventEndAt) {
    this.eventEndAt = eventEndAt;
    return this;
  }

   /**
   * Format: YYYY-MM-DDTHH:MM-0600 i.e. 2015-07-04T13:00-0600
   * @return eventEndAt
  **/
  @Schema(description = "Format: YYYY-MM-DDTHH:MM-0600 i.e. 2015-07-04T13:00-0600")
  public String getEventEndAt() {
    return eventEndAt;
  }

  public void setEventEndAt(String eventEndAt) {
    this.eventEndAt = eventEndAt;
  }

  public V1EventsBody eventLocation(String eventLocation) {
    this.eventLocation = eventLocation;
    return this;
  }

   /**
   * Get eventLocation
   * @return eventLocation
  **/
  @Schema(description = "")
  public String getEventLocation() {
    return eventLocation;
  }

  public void setEventLocation(String eventLocation) {
    this.eventLocation = eventLocation;
  }

  public V1EventsBody eventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
    return this;
  }

   /**
   * Get eventDescription
   * @return eventDescription
  **/
  @Schema(required = true, description = "")
  public String getEventDescription() {
    return eventDescription;
  }

  public void setEventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
  }

  public V1EventsBody eventInviteableTokens(String eventInviteableTokens) {
    this.eventInviteableTokens = eventInviteableTokens;
    return this;
  }

   /**
   * An array of strings describing who to invite. Each token must include the class and ID of the Troop, Patrol, or User to invite.               For example, to invite the whole troop, you would provide [&#x27;Troop-1211&#x27;], or to invite patrol 11911 and user 1223 and user 3344 then you would               provide [&#x27;Patrol-11911&#x27;, &#x27;User-1223&#x27;, &#x27;User-3344&#x27;]
   * @return eventInviteableTokens
  **/
  @Schema(description = "An array of strings describing who to invite. Each token must include the class and ID of the Troop, Patrol, or User to invite.               For example, to invite the whole troop, you would provide ['Troop-1211'], or to invite patrol 11911 and user 1223 and user 3344 then you would               provide ['Patrol-11911', 'User-1223', 'User-3344']")
  public String getEventInviteableTokens() {
    return eventInviteableTokens;
  }

  public void setEventInviteableTokens(String eventInviteableTokens) {
    this.eventInviteableTokens = eventInviteableTokens;
  }

  public V1EventsBody eventCampingNights(String eventCampingNights) {
    this.eventCampingNights = eventCampingNights;
    return this;
  }

   /**
   * How many nights do you expect to camp?
   * @return eventCampingNights
  **/
  @Schema(description = "How many nights do you expect to camp?")
  public String getEventCampingNights() {
    return eventCampingNights;
  }

  public void setEventCampingNights(String eventCampingNights) {
    this.eventCampingNights = eventCampingNights;
  }

  public V1EventsBody eventHikingMiles(String eventHikingMiles) {
    this.eventHikingMiles = eventHikingMiles;
    return this;
  }

   /**
   * Expected number of miles to be hiked
   * @return eventHikingMiles
  **/
  @Schema(description = "Expected number of miles to be hiked")
  public String getEventHikingMiles() {
    return eventHikingMiles;
  }

  public void setEventHikingMiles(String eventHikingMiles) {
    this.eventHikingMiles = eventHikingMiles;
  }

  public V1EventsBody eventCanoeingMiles(String eventCanoeingMiles) {
    this.eventCanoeingMiles = eventCanoeingMiles;
    return this;
  }

   /**
   * Expected number of miles to be traveled by canoe
   * @return eventCanoeingMiles
  **/
  @Schema(description = "Expected number of miles to be traveled by canoe")
  public String getEventCanoeingMiles() {
    return eventCanoeingMiles;
  }

  public void setEventCanoeingMiles(String eventCanoeingMiles) {
    this.eventCanoeingMiles = eventCanoeingMiles;
  }

  public V1EventsBody eventDues(String eventDues) {
    this.eventDues = eventDues;
    return this;
  }

   /**
   * Fee for youth to attend
   * @return eventDues
  **/
  @Schema(description = "Fee for youth to attend")
  public String getEventDues() {
    return eventDues;
  }

  public void setEventDues(String eventDues) {
    this.eventDues = eventDues;
  }

  public V1EventsBody eventAdultFee(String eventAdultFee) {
    this.eventAdultFee = eventAdultFee;
    return this;
  }

   /**
   * Fee for adults to attend
   * @return eventAdultFee
  **/
  @Schema(description = "Fee for adults to attend")
  public String getEventAdultFee() {
    return eventAdultFee;
  }

  public void setEventAdultFee(String eventAdultFee) {
    this.eventAdultFee = eventAdultFee;
  }

  public V1EventsBody eventRsvpDeadline(String eventRsvpDeadline) {
    this.eventRsvpDeadline = eventRsvpDeadline;
    return this;
  }

   /**
   * Get eventRsvpDeadline
   * @return eventRsvpDeadline
  **/
  @Schema(description = "")
  public String getEventRsvpDeadline() {
    return eventRsvpDeadline;
  }

  public void setEventRsvpDeadline(String eventRsvpDeadline) {
    this.eventRsvpDeadline = eventRsvpDeadline;
  }

  public V1EventsBody eventSendInvitesWhen(String eventSendInvitesWhen) {
    this.eventSendInvitesWhen = eventSendInvitesWhen;
    return this;
  }

   /**
   * Number of days before the event to send an invitation. Use 999 to indicate sending the invite immediately.
   * @return eventSendInvitesWhen
  **/
  @Schema(description = "Number of days before the event to send an invitation. Use 999 to indicate sending the invite immediately.")
  public String getEventSendInvitesWhen() {
    return eventSendInvitesWhen;
  }

  public void setEventSendInvitesWhen(String eventSendInvitesWhen) {
    this.eventSendInvitesWhen = eventSendInvitesWhen;
  }

  public V1EventsBody eventSendReminderWhen(String eventSendReminderWhen) {
    this.eventSendReminderWhen = eventSendReminderWhen;
    return this;
  }

   /**
   * Number of days before the event to send a reminder.
   * @return eventSendReminderWhen
  **/
  @Schema(description = "Number of days before the event to send a reminder.")
  public String getEventSendReminderWhen() {
    return eventSendReminderWhen;
  }

  public void setEventSendReminderWhen(String eventSendReminderWhen) {
    this.eventSendReminderWhen = eventSendReminderWhen;
  }

  public V1EventsBody eventServiceHours(String eventServiceHours) {
    this.eventServiceHours = eventServiceHours;
    return this;
  }

   /**
   * Number of service hours expected to be completed
   * @return eventServiceHours
  **/
  @Schema(description = "Number of service hours expected to be completed")
  public String getEventServiceHours() {
    return eventServiceHours;
  }

  public void setEventServiceHours(String eventServiceHours) {
    this.eventServiceHours = eventServiceHours;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1EventsBody v1EventsBody = (V1EventsBody) o;
    return Objects.equals(this.eventTitle, v1EventsBody.eventTitle) &&
        Objects.equals(this.eventEventTypeId, v1EventsBody.eventEventTypeId) &&
        Objects.equals(this.eventStartAt, v1EventsBody.eventStartAt) &&
        Objects.equals(this.eventEndAt, v1EventsBody.eventEndAt) &&
        Objects.equals(this.eventLocation, v1EventsBody.eventLocation) &&
        Objects.equals(this.eventDescription, v1EventsBody.eventDescription) &&
        Objects.equals(this.eventInviteableTokens, v1EventsBody.eventInviteableTokens) &&
        Objects.equals(this.eventCampingNights, v1EventsBody.eventCampingNights) &&
        Objects.equals(this.eventHikingMiles, v1EventsBody.eventHikingMiles) &&
        Objects.equals(this.eventCanoeingMiles, v1EventsBody.eventCanoeingMiles) &&
        Objects.equals(this.eventDues, v1EventsBody.eventDues) &&
        Objects.equals(this.eventAdultFee, v1EventsBody.eventAdultFee) &&
        Objects.equals(this.eventRsvpDeadline, v1EventsBody.eventRsvpDeadline) &&
        Objects.equals(this.eventSendInvitesWhen, v1EventsBody.eventSendInvitesWhen) &&
        Objects.equals(this.eventSendReminderWhen, v1EventsBody.eventSendReminderWhen) &&
        Objects.equals(this.eventServiceHours, v1EventsBody.eventServiceHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventTitle, eventEventTypeId, eventStartAt, eventEndAt, eventLocation, eventDescription, eventInviteableTokens, eventCampingNights, eventHikingMiles, eventCanoeingMiles, eventDues, eventAdultFee, eventRsvpDeadline, eventSendInvitesWhen, eventSendReminderWhen, eventServiceHours);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1EventsBody {\n");
    
    sb.append("    eventTitle: ").append(toIndentedString(eventTitle)).append("\n");
    sb.append("    eventEventTypeId: ").append(toIndentedString(eventEventTypeId)).append("\n");
    sb.append("    eventStartAt: ").append(toIndentedString(eventStartAt)).append("\n");
    sb.append("    eventEndAt: ").append(toIndentedString(eventEndAt)).append("\n");
    sb.append("    eventLocation: ").append(toIndentedString(eventLocation)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    eventInviteableTokens: ").append(toIndentedString(eventInviteableTokens)).append("\n");
    sb.append("    eventCampingNights: ").append(toIndentedString(eventCampingNights)).append("\n");
    sb.append("    eventHikingMiles: ").append(toIndentedString(eventHikingMiles)).append("\n");
    sb.append("    eventCanoeingMiles: ").append(toIndentedString(eventCanoeingMiles)).append("\n");
    sb.append("    eventDues: ").append(toIndentedString(eventDues)).append("\n");
    sb.append("    eventAdultFee: ").append(toIndentedString(eventAdultFee)).append("\n");
    sb.append("    eventRsvpDeadline: ").append(toIndentedString(eventRsvpDeadline)).append("\n");
    sb.append("    eventSendInvitesWhen: ").append(toIndentedString(eventSendInvitesWhen)).append("\n");
    sb.append("    eventSendReminderWhen: ").append(toIndentedString(eventSendReminderWhen)).append("\n");
    sb.append("    eventServiceHours: ").append(toIndentedString(eventServiceHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
